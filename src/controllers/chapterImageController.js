const path = require('path');
const ChapterImage = require('../models/ChapterImage');
const fs = require('fs');
const Chapter = require('../models/Chapter');
const Story = require('../models/Story');


// üìå Th√™m h√¨nh ·∫£nh v√†o Chapter (t·ª± ƒë·ªông l·∫•y storyTitle v√† tƒÉng image_order)
exports.uploadChapterImages = async (req, res) => {
  try {
    const { chapter_id } = req.body;

    // L·∫•y chapter v√† story t∆∞∆°ng ·ª©ng
    const chapter = await Chapter.findById(chapter_id);
    if (!chapter) return res.status(404).json({ message: 'Chapter kh√¥ng t·ªìn t·∫°i!' });

    const story = await Story.findById(chapter.story_id);
    if (!story) return res.status(404).json({ message: 'Story kh√¥ng t·ªìn t·∫°i!' });

    const storyTitle = story.title.trim().replace(/\s+/g, '_'); // Format l·∫°i title (b·ªè kho·∫£ng tr·∫Øng)
    const chapterNumber = chapter.chapter_number;

    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ message: 'Ch∆∞a c√≥ h√¨nh ·∫£nh n√†o ƒë∆∞·ª£c t·∫£i l√™n!' });
    }

    // T·∫°o th∆∞ m·ª•c ƒë√≠ch n·∫øu ch∆∞a c√≥: /uploads/storyTitle/chapterNumber
    const destDir = path.join(__dirname, '..', 'uploads', storyTitle, String(chapterNumber));
    if (!fs.existsSync(destDir)) {
      fs.mkdirSync(destDir, { recursive: true });
    }

    // L·∫•y s·ªë th·ª© t·ª± ·∫£nh l·ªõn nh·∫•t trong chapter
    const lastImage = await ChapterImage.findOne({ chapter_id }).sort('-image_order');
    let nextOrder = lastImage ? lastImage.image_order + 1 : 1;

    // L∆∞u v√†o DB v√† chuy·ªÉn file t·ª´ th∆∞ m·ª•c t·∫°m sang ƒë√≠ch
    const uploadedImages = [];
    for (const file of req.files) {
      // ƒê∆∞·ªùng d·∫´n file hi·ªán t·∫°i (th∆∞ m·ª•c t·∫°m)
      const tmpPath = file.path;
      // ƒê∆∞·ªùng d·∫´n ƒë√≠ch
      const destPath = path.join(destDir, file.filename);

      // Chuy·ªÉn file t·ª´ th∆∞ m·ª•c t·∫°m sang th∆∞ m·ª•c ƒë√≠ch
      fs.renameSync(tmpPath, destPath);

      // L∆∞u th√¥ng tin ·∫£nh v·ªõi ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi theo format /uploads/storyTitle/chapterNumber/filename
      const newImage = new ChapterImage({
        chapter_id,
        image_url: `/uploads/${storyTitle}/${chapterNumber}/${file.filename}`,
        image_order: nextOrder++,
      });
      await newImage.save();
      uploadedImages.push(newImage);
    }

    res.status(201).json({ message: 'T·∫£i ·∫£nh l√™n th√†nh c√¥ng!', images: uploadedImages });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server!', error: error.message });
  }
};

// üìå L·∫•y danh s√°ch ·∫£nh c·ªßa m·ªôt Chapter
exports.getChapterImages = async (req, res) => {
  try {
    const { chapter_id } = req.params;
    const images = await ChapterImage.find({ chapter_id }).sort('image_order');
    res.json({ images });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server!', error: error.message });
  }
};

// üìå C·∫≠p nh·∫≠t ·∫£nh (ch·ªâ 1 ·∫£nh, gi·ªØ nguy√™n image_order)
exports.updateChapterImage = async (req, res) => {
  try {
    const { id } = req.params;
    const newFile = req.file;

    if (!newFile) {
      return res.status(400).json({ message: 'Ch∆∞a c√≥ h√¨nh ·∫£nh m·ªõi!' });
    }

    const chapterImage = await ChapterImage.findById(id).populate('chapter_id');
    if (!chapterImage) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ·∫£nh!' });
    }

    // L·∫•y storyTitle v√† chapterNumber
    const chapter = chapterImage.chapter_id;
    const story = await Story.findById(chapter.story_id);
    const storyTitle = story.title.trim().replace(/\s+/g, '_');
    const chapterNumber = chapter.chapter_number;

    // T·∫°o th∆∞ m·ª•c ƒë√≠ch n·∫øu ch∆∞a c√≥
    const destDir = path.join(__dirname, '..', 'uploads', storyTitle, String(chapterNumber));
    if (!fs.existsSync(destDir)) {
      fs.mkdirSync(destDir, { recursive: true });
    }

    // X√≥a ·∫£nh c≈©
    const oldImagePath = path.join(__dirname, '..', chapterImage.image_url);
    if (fs.existsSync(oldImagePath)) {
      fs.unlinkSync(oldImagePath);
    }

    // Di chuy·ªÉn file t·ª´ th∆∞ m·ª•c t·∫°m sang th∆∞ m·ª•c ƒë√≠ch
    const tmpPath = newFile.path;
    const destPath = path.join(destDir, newFile.filename);
    fs.renameSync(tmpPath, destPath);

    // C·∫≠p nh·∫≠t l·∫°i ƒë∆∞·ªùng d·∫´n ·∫£nh m·ªõi
    chapterImage.image_url = `/uploads/${storyTitle}/${chapterNumber}/${newFile.filename}`;
    await chapterImage.save();

    res.json({ message: 'C·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng!', image: chapterImage });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server!', error: error.message });
  }
};

// üìå X√≥a m·ªôt ·∫£nh
exports.deleteChapterImage = async (req, res) => {
  try {
    const { id } = req.params;
    const chapterImage = await ChapterImage.findById(id);
    if (!chapterImage) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ·∫£nh!' });
    }

    // X√≥a ·∫£nh tr√™n h·ªá th·ªëng
    const imagePath = path.join(__dirname, '..', chapterImage.image_url);
    if (fs.existsSync(imagePath)) {
      fs.unlinkSync(imagePath);
    }

    // X√≥a kh·ªèi database
    await ChapterImage.findByIdAndDelete(id);

    res.json({ message: 'X√≥a ·∫£nh th√†nh c√¥ng!' });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server!', error: error.message });
  }
};
