const Chapter = require('../models/Chapter');
const Story = require('../models/Story');
const Notification = require('../models/Notification');


// [POST] /api/chapters
const addChapter = async (req, res) => {
  try {
    const { story_id, title, content, chapter_number } = req.body;
    const story = await Story.findById(story_id);

    if (!story) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y truy·ªán!' });
    }
    if (story.status === 'completed') {
      return res.status(400).json({ message: 'Truy·ªán ƒë√£ ho√†n th√†nh, kh√¥ng th·ªÉ th√™m ch∆∞∆°ng m·ªõi!' });
    }
    // Ki·ªÉm tra chapter_number h·ª£p l·ªá
    if (chapter_number > story.number_of_chapters) {
      return res.status(400).json({ message: `Ch·ªâ c√≥ th·ªÉ th√™m t·ªëi ƒëa ${story.number_of_chapters} ch∆∞∆°ng!` });
    }

    // Ki·ªÉm tra xem chapter_number ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingChapter = await Chapter.findOne({ story_id, chapter_number });
    if (existingChapter) {
      return res.status(400).json({ message: `Ch∆∞∆°ng ${chapter_number} ƒë√£ t·ªìn t·∫°i!` });
    }

    // C·∫≠p nh·∫≠t latest_chapter n·∫øu c·∫ßn
    if (chapter_number > story.latest_chapter) {
      story.latest_chapter = chapter_number;
    }

    // T·∫°o ch∆∞∆°ng m·ªõi
    const newChapter = new Chapter({ story_id, chapter_number, title, content });
    await newChapter.save();

    // ƒê·∫øm s·ªë ch∆∞∆°ng th·ª±c t·∫ø hi·ªán c√≥
    const actualChapterCount = await Chapter.countDocuments({ story_id });

    // N·∫øu ƒë·ªß s·ªë ch∆∞∆°ng th√¨ ƒë√°nh d·∫•u l√† completed
    if (actualChapterCount === story.number_of_chapters) {
      story.status = 'completed';
    }

    await story.save();

    // l∆∞u v√†o notification r·∫±ng c√≥ chapter m·ªõi
    const notification = new Notification({
      story_id,
      chapter_id: newChapter._id,
      message: `Truy·ªán "${story.title}" v·ª´a c·∫≠p nh·∫≠t ch∆∞∆°ng ${chapter_number}!`
    });
    const savedNotification = await notification.save();

    // üî• Emit socket event ƒë·ªÉ client bi·∫øt c√≥ ch∆∞∆°ng m·ªõi
    const io = req.app.get('io'); // L·∫•y io t·ª´ app (ƒë√£ g·∫Øn ·ªü server.js)
    io.emit('new-chapter', savedNotification);
    console.log('üì¢ Emit socket new-chapter:', savedNotification);


    res.status(201).json({ message: 'Th√™m ch∆∞∆°ng th√†nh c√¥ng!', chapter: newChapter });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server!', error: error.message });
  }
};


// [GET] /api/chapters/:id
const getChapterById = async (req, res) => {
  try {
    const { id } = req.params;
    const chapter = await Chapter.findById(id).populate('story_id', 'title');

    if (!chapter) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng!' });
    }

    res.json(chapter);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server!', error: error.message });
  }
};

// [PUT] /api/chapters/:id
const updateChapter = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, content } = req.body;

    const updatedChapter = await Chapter.findByIdAndUpdate(
      id,
      { title, content },
      { new: true }
    );

    if (!updatedChapter) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng!' });
    }

    res.json({ message: 'C·∫≠p nh·∫≠t ch∆∞∆°ng th√†nh c√¥ng!', chapter: updatedChapter });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server!', error: error.message });
  }
};

// [DELETE] /api/chapters/:id
const deleteChapter = async (req, res) => {
  try {
    const { id } = req.params;
    const chapter = await Chapter.findById(id);
    if (!chapter) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng!' });
    }

    const deletedChapter = await Chapter.findByIdAndDelete(id);
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa story
    const story = await Story.findById(deletedChapter.story_id);
    if (!story) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y truy·ªán!' });
    }
    story.status = 'ongoing';
    await story.save(); // L∆∞u l·∫°i thay ƒë·ªïi

    res.json({ message: 'X√≥a ch∆∞∆°ng th√†nh c√¥ng!' });
  } catch (error) {
    console.error("L·ªói server:", error); // Debug: In l·ªói ra console

    res.status(500).json({ message: 'L·ªói server!', error: error.message });
  }
};


module.exports = {
  addChapter,
  getChapterById,
  updateChapter,
  deleteChapter,
};
