const Story = require("../models/Story");
const Category = require("../models/Category");
const Chapter = require("../models/Chapter");

// üü¢ [POST] /api/stories   ---- (T·∫°o truy·ªán (Admin only))
const createStory = async (req, res) => {
  try {
    const {
      title, 
      description, 
      author, 
      category_id, 
      number_of_chapters, 
      latest_chapter, 
      status 
    } = req.body;
    // const admin_id = req.user.userId; // L·∫•y ID c·ªßa admin t·ª´ token

    const category = await Category.findById(category_id);
    if (!category) return res.status(404).json({ message: "Danh m·ª•c kh√¥ng t·ªìn t·∫°i!" });

    const newStory = new Story({ 
      title, 
      description, 
      author, 
      category_id, 
      number_of_chapters, 
      latest_chapter, 
      status 
    });
    await newStory.save();

    res.status(201).json({ message: "Truy·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!", story: newStory });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

// üü¢ [GET] /api/stories ----- (L·∫•y danh s√°ch truy·ªán)
const getStories = async (req, res) => {
  try {
    const stories = await Story.find()
      .populate("category_id", "name")
    // .populate("admin_id", "username email");

    res.json(stories);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

// üü¢ [GET] /api/stories/:id ---- (L·∫•y truy·ªán theo ID)
const getStoryById = async (req, res) => {
  try {
    const { id } = req.params;
    const story = await Story.findById(id)
      .populate("category_id", "name")
    // .populate("admin_id", "username email");

    if (!story) return res.status(404).json({ message: "Truy·ªán kh√¥ng t·ªìn t·∫°i!" });

    res.json(story);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

// üü¢ [PUT] /api/stories/:id -------- C·∫≠p nh·∫≠t truy·ªán (Admin only)
const updateStory = async (req, res) => {
  try {
    const { id } = req.params;

    const {
      title, 
      description, 
      author, 
      category_id, 
      number_of_chapters, 
      status 
    } = req.body;

    const category = await Category.findById(category_id);
    if (!category) return res.status(404).json({ message: "Danh m·ª•c kh√¥ng t·ªìn t·∫°i!" });

    const story = await Story.findById(id);
    if (!story) return res.status(404).json({ message: "Truy·ªán kh√¥ng t·ªìn t·∫°i!" });

    story.title = title || story.title;
    story.description = description || story.description;
    story.author = author || story.author;
    story.category_id = category_id || story.category_id;
    story.number_of_chapters = number_of_chapters || story.number_of_chapters;
    story.status = status || story.status;

    await story.save();
    res.json({ message: "C·∫≠p nh·∫≠t truy·ªán th√†nh c√¥ng!", story });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

// üü¢ [DELETE] /api/stories/:id --------- X√≥a truy·ªán (Admin only)
const deleteStory = async (req, res) => {
  try {
    const { id } = req.params;
    const story = await Story.findById(id);
    if (!story) return res.status(404).json({ message: "Truy·ªán kh√¥ng t·ªìn t·∫°i!" });

    await Story.findByIdAndDelete(id);
    res.json({ message: "X√≥a truy·ªán th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

const getChaptersByStory = async (req, res) => {
  try {
    const { storyId } = req.params;
    const story = await Story.findById(storyId);
    if (!story) return res.status(404).json({ message: "Truy·ªán kh√¥ng t·ªìn t·∫°i!" });
    const chapters = await Chapter.find({ story_id: storyId });
    res.json(chapters);
  }
  catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
}


module.exports = { createStory, getStories, getStoryById, updateStory, deleteStory, getChaptersByStory };
